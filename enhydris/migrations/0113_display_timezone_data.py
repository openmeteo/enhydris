# Generated by Django 3.2.13 on 2022-10-15 11:13

from django.db import migrations


class CannotMigrate(Exception):
    pass


def forward(apps, schema_editor):
    Gentity = apps.get_model("enhydris", "Gentity")
    check_consistency(Gentity)
    do_migration(Gentity)


def check_consistency(Gentity):
    errors = []
    for gentity in Gentity.objects.all():
        try:
            time_zone = ensure_all_groups_are_in_same_time_zone(gentity)
            ensure_time_zone_is_whole_hour(gentity, time_zone)
        except CannotMigrate as e:
            errors.append(str(e))
    if errors:
        errorstring = "\n\n".join(errors)
        raise CannotMigrate(f"The following errors were detected:\n\n{errorstring}\n")


def ensure_all_groups_are_in_same_time_zone(gentity):
    result = None
    for tsg in gentity.timeseriesgroup_set.all():
        if result is None:
            result = tsg.time_zone
        elif result.id != tsg.time_zone.id:
            raise CannotMigrate(
                f"Station {gentity.id} ({gentity.name}) "
                "contains time series groups in different time zones"
            )
    return result


def ensure_time_zone_is_whole_hour(gentity, time_zone):
    if (time_zone is not None) and (time_zone.utc_offset % 60):
        raise CannotMigrate(
            f"Time zone {time_zone.code} does not have a whole hour UTC offset. "
            "Currently stations that use it cannot be migrated. "
            f"Station {gentity.id} ({gentity.name}) uses it."
        )


def do_migration(Gentity):
    for gentity in Gentity.objects.all():
        old_time_zone = get_time_zone_for_gentity(gentity)
        new_time_zone = get_new_time_zone(old_time_zone)
        gentity.display_timezone = new_time_zone
        gentity.save()


def get_time_zone_for_gentity(gentity):
    tsgs = gentity.timeseriesgroup_set
    if tsgs.count():
        return tsgs.first().time_zone
    else:
        return None


def get_new_time_zone(old_time_zone):
    if old_time_zone is None:
        return ""
    hours = -old_time_zone.utc_offset // 60
    result = "Etc/GMT"
    if hours != 0:
        result += f"{hours:+}"
    return result


def backward(apps, schema_editor):
    Gentity = apps.get_model("enhydris", "Gentity")
    TimeZone = apps.get_model("enhydris", "TimeZone")
    for gentity in Gentity.objects.all():
        if gentity.timeseriesgroup_set.count() == 0:
            continue
        time_zone = get_backward_time_zone(TimeZone, gentity.display_timezone)
        for tsg in gentity.timeseriesgroup_set.all():
            tsg.time_zone = time_zone
            tsg.save()


def get_backward_time_zone(TimeZone, display_timezone):
    if display_timezone == "Etc/GMT":
        utc_offset = 0
        code = "UTC"
    elif display_timezone.startswith("Etc/GMT"):
        utc_offset = -int(display_timezone[7:]) * 60
        code = f"UTC{utc_offset // 60:+}"
    else:
        raise CannotMigrate(f"Can't handle time zone {display_timezone}")
    result, created = TimeZone.objects.get_or_create(code=code, utc_offset=utc_offset)
    return result


class Migration(migrations.Migration):

    dependencies = [
        ("enhydris", "0112_display_timezone"),
    ]

    operations = [
        migrations.RunPython(forward, backward),
    ]
