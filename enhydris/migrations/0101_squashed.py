# Generated by Django 2.2.15 on 2020-10-19 09:28

import django.contrib.gis.db.models.fields
import django.contrib.postgres.operations
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import parler.fields


class Migration(migrations.Migration):

    replaces = [
        ("enhydris", "0001_initial"),
        ("enhydris", "0002_initial_data"),
        ("enhydris", "0003_user_name"),
        ("enhydris", "0005_remove_gentity_generic_data"),
        ("enhydris", "0006_lint"),
        ("enhydris", "0007_make_station_coordinates_not_null"),
        ("enhydris", "0008_join_alt_fields"),
        ("enhydris", "0009_remove_alt_fields"),
        ("enhydris", "0010_change_verbose_names"),
        ("enhydris", "0011_gentity_event_user_optional"),
        ("enhydris", "0012_simplify_coordinates"),
        ("enhydris", "0013_overseers"),
        ("enhydris", "0014_translatable_variable"),
        ("enhydris", "0015_translatable_stationtype"),
        ("enhydris", "0016_precision"),
        ("enhydris", "0017_unaccent"),
        ("enhydris", "0018_remove_gentity_alt_code"),
        ("enhydris", "0019_translatable_timestep"),
        ("enhydris", "0020_abolish_station_type"),
        ("enhydris", "0021_gpoint_geometry"),
        ("enhydris", "0022_refactor_garea"),
        ("enhydris", "0023_refactor_garea_part_b"),
        ("enhydris", "0024_rename_short_name_to_code"),
        ("enhydris", "0025_gentity_geom"),
        ("enhydris", "0026_add_new_time_step"),
        ("enhydris", "0027_populate_new_time_step"),
        ("enhydris", "0028_remove_old_time_step"),
        ("enhydris", "0029_remove_interval_type"),
        ("enhydris", "0030_abolish_instruments"),
        ("enhydris", "0031_change_unitofmeasurement_meta"),
        ("enhydris", "0032_abolish_filetype"),
        ("enhydris", "0033_timeseriesrecord"),
        ("enhydris", "0034_timeseriesrecord_data"),
        ("enhydris", "0035_timeseriesrecord_constraints_and_indexes"),
        ("enhydris", "0036_remove_timeseries_datafile_and_bounding_dates"),
        ("enhydris", "0037_timeseries_groups"),
        ("enhydris", "0038_delete_userprofile"),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="EventType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_modified",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False, null=True
                    ),
                ),
                ("descr", models.CharField(blank=True, max_length=200)),
            ],
            options={
                "abstract": False,
                "ordering": ("descr",),
            },
        ),
        migrations.CreateModel(
            name="Gentity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_modified",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False, null=True
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=200)),
                ("code", models.CharField(blank=True, max_length=50)),
                ("geom", django.contrib.gis.db.models.fields.GeometryField(srid=4326)),
                ("remarks", models.TextField(blank=True)),
            ],
            options={
                "ordering": ("name",),
                "verbose_name_plural": "Gentities",
            },
        ),
        migrations.CreateModel(
            name="Lentity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_modified",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False, null=True
                    ),
                ),
                ("remarks", models.TextField(blank=True)),
                (
                    "ordering_string",
                    models.CharField(
                        blank=True, editable=False, max_length=255, null=True
                    ),
                ),
            ],
            options={
                "ordering": ("ordering_string",),
                "verbose_name_plural": "Lentities",
            },
        ),
        migrations.CreateModel(
            name="TimeZone",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_modified",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False, null=True
                    ),
                ),
                ("code", models.CharField(max_length=50)),
                ("utc_offset", models.SmallIntegerField()),
            ],
            options={
                "ordering": ("utc_offset",),
            },
        ),
        migrations.CreateModel(
            name="Variable",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_modified",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False, null=True
                    ),
                ),
            ],
            options={},
        ),
        migrations.CreateModel(
            name="VariableTranslation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        db_index=True, max_length=15, verbose_name="Language"
                    ),
                ),
                ("descr", models.CharField(blank=True, max_length=200)),
                (
                    "master",
                    parler.fields.TranslationsForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="translations",
                        to="enhydris.Variable",
                    ),
                ),
            ],
            options={
                "verbose_name": "variable Translation",
                "db_table": "enhydris_variable_translation",
                "db_tablespace": "",
                "managed": True,
                "default_permissions": (),
                "unique_together": {("language_code", "master")},
            },
        ),
        migrations.CreateModel(
            name="GareaCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_modified",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False, null=True
                    ),
                ),
                ("descr", models.CharField(blank=True, max_length=200)),
            ],
            options={
                "verbose_name": "Garea categories",
                "verbose_name_plural": "Garea categories",
            },
        ),
        migrations.CreateModel(
            name="Garea",
            fields=[
                (
                    "gentity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="enhydris.Gentity",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris.GareaCategory",
                    ),
                ),
            ],
            bases=("enhydris.gentity",),
        ),
        migrations.CreateModel(
            name="Gpoint",
            fields=[
                (
                    "gentity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="enhydris.Gentity",
                    ),
                ),
                ("original_srid", models.IntegerField(blank=True, null=True)),
                ("altitude", models.FloatField(blank=True, null=True)),
            ],
            bases=("enhydris.gentity",),
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "lentity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="enhydris.Lentity",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=200)),
                ("acronym", models.CharField(blank=True, max_length=50)),
            ],
            options={
                "ordering": ("name",),
            },
            bases=("enhydris.lentity",),
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "lentity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="enhydris.Lentity",
                    ),
                ),
                ("last_name", models.CharField(blank=True, max_length=100)),
                ("first_name", models.CharField(blank=True, max_length=100)),
                ("middle_names", models.CharField(blank=True, max_length=100)),
                ("initials", models.CharField(blank=True, max_length=20)),
            ],
            options={
                "ordering": ("last_name", "first_name"),
            },
            bases=("enhydris.lentity",),
        ),
        migrations.CreateModel(
            name="UnitOfMeasurement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_modified",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False, null=True
                    ),
                ),
                ("descr", models.CharField(blank=True, max_length=200)),
                ("symbol", models.CharField(max_length=50)),
                ("variables", models.ManyToManyField(to="enhydris.Variable")),
            ],
            options={
                "abstract": False,
                "ordering": ["symbol"],
            },
        ),
        migrations.CreateModel(
            name="TimeseriesGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_modified",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False, null=True
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text=(
                            "In most cases, you want to leave this blank, and the name "
                            "of the time series group will be the name of the "
                            'variable, such as "Temperature". However, if you have two '
                            "groups with the same variable (e.g. if you have two "
                            "temperature sensors), specify a name to tell them apart."
                        ),
                        max_length=200,
                    ),
                ),
                ("hidden", models.BooleanField(default=False)),
                (
                    "precision",
                    models.SmallIntegerField(
                        help_text=(
                            "The number of decimal digits to which the values of the "
                            "time series will be rounded. It's usually positive, but "
                            "it can be zero or negative; for example, for humidity it "
                            "is usually zero; for wind direction in degrees, depending "
                            "on the sensor, you might want to specify precision -1, "
                            "which means the value will be 10, or 20, or 30, etc. This "
                            "only affects the rounding of values when the time series "
                            "is retrieved; values are always stored with all the "
                            "decimal digits provided."
                        ),
                    ),
                ),
                ("remarks", models.TextField(blank=True)),
                (
                    "gentity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris.Gentity",
                    ),
                ),
                (
                    "time_zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris.TimeZone",
                    ),
                ),
                (
                    "unit_of_measurement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris.UnitOfMeasurement",
                    ),
                ),
                (
                    "variable",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris.Variable",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Timeseries",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_modified",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False, null=True
                    ),
                ),
                (
                    "time_step",
                    models.CharField(
                        blank=True,
                        help_text=(
                            'E.g. "10min", "H" (hourly), "D" (daily), "M" (monthly), '
                            '"Y" (yearly). More specifically, it\'s an optional number '
                            "plus a unit, with no space in between. The units "
                            "available are min, H, D, M, Y. Leave empty if the time "
                            "series is irregular."
                        ),
                        max_length=7,
                    ),
                ),
                (
                    "timeseries_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris.TimeseriesGroup",
                    ),
                ),
                (
                    "type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (100, "Raw"),
                            (150, "Processed"),
                            (200, "Checked"),
                            (300, "Regularized"),
                            (400, "Aggregated"),
                        ]
                    ),
                ),
            ],
            options={
                "ordering": ("type",),
                "verbose_name": "Time series",
                "verbose_name_plural": "Time series",
                "unique_together": {("timeseries_group", "type", "time_step")},
                "constraints": [
                    models.UniqueConstraint(
                        fields=["timeseries_group"],
                        condition=models.Q(type=100),
                        name="only_one_raw_timeseries_per_group",
                    ),
                    models.UniqueConstraint(
                        fields=["timeseries_group"],
                        condition=models.Q(type=200),
                        name="only_one_checked_timeseries_per_group",
                    ),
                    models.UniqueConstraint(
                        fields=["timeseries_group"],
                        condition=models.Q(type=300),
                        name="only_one_regularized_timeseries_per_group",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="GentityFile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_modified",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False, null=True
                    ),
                ),
                ("date", models.DateField(blank=True, null=True)),
                ("content", models.FileField(upload_to="gentityfile")),
                ("descr", models.CharField(max_length=100)),
                ("remarks", models.TextField(blank=True)),
                (
                    "gentity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris.Gentity",
                    ),
                ),
            ],
            options={
                "ordering": ("descr",),
                "verbose_name": "File",
                "verbose_name_plural": "Files",
            },
        ),
        migrations.CreateModel(
            name="GentityEvent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_modified",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False, null=True
                    ),
                ),
                ("date", models.DateField()),
                ("user", models.CharField(blank=True, max_length=64)),
                ("report", models.TextField(blank=True)),
                (
                    "gentity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris.Gentity",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris.EventType",
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
                "verbose_name": "Log entry",
                "verbose_name_plural": "Log entries",
            },
        ),
        migrations.CreateModel(
            name="Station",
            fields=[
                (
                    "gpoint_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="enhydris.Gpoint",
                    ),
                ),
                ("is_automatic", models.BooleanField(default=False)),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("copyright_holder", models.TextField()),
                ("copyright_years", models.CharField(max_length=10)),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_stations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "maintainers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="maintaining_stations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("overseer", models.CharField(blank=True, max_length=30)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owned_stations",
                        to="enhydris.Lentity",
                    ),
                ),
            ],
            bases=("enhydris.gpoint",),
        ),
        django.contrib.postgres.operations.UnaccentExtension(),
        migrations.CreateModel(
            name="TimeseriesRecord",
            fields=[
                (
                    "pk",
                    models.CompositePrimaryKey(
                        "timeseries_id",
                        "timestamp",
                        blank=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("timestamp", models.DateTimeField(verbose_name="Timestamp")),
                (
                    "value",
                    models.FloatField(blank=True, null=True, verbose_name="Value"),
                ),
                (
                    "flags",
                    models.CharField(blank=True, max_length=237, verbose_name="Flags"),
                ),
                (
                    "timeseries",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris.timeseries",
                    ),
                ),
            ],
            options={
                "verbose_name": "Time series record",
                "verbose_name_plural": "Time series records",
                "get_latest_by": "timestamp",
                "indexes": [
                    models.Index(
                        fields=["timestamp", "timeseries_id"],
                        name="enhydris_ti_timesta_4b4016_idx",
                    )
                ],
            },
        ),
        migrations.RunSQL(
            sql="CREATE EXTENSION IF NOT EXISTS timescaledb",
        ),
        migrations.RunSQL(
            sql="""
                SELECT create_hypertable(
                    'enhydris_timeseriesrecord',
                    'timestamp',
                    chunk_time_interval => interval '1 year'
                )
            """,
        ),
    ]
